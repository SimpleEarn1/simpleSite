const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Transaction = require('../models/Transaction');
const { authMiddleware, adminOnly } = require('../middleware/auth');

// üîê –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  const admin = await User.findOne({ email });

  if (!admin || (!admin.isAdmin && admin.role !== 'admin')) {
    return res.status(401).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' });
  }

  if (admin.password !== password) {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
  }

  const token = jwt.sign(
    { id: admin._id, isAdmin: true, role: admin.role },
    process.env.JWT_SECRET,
    { expiresIn: '7d' }
  );

  res.json({ token });
});

// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–∞—Ä–æ–ª—è)
router.get('/users', authMiddleware, adminOnly, async (req, res) => {
  try {
    const users = await User.find({}, '-password');
    res.json(users);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üíµ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
router.post('/users/:id/balance', authMiddleware, adminOnly, async (req, res) => {
  try {
    const { amount } = req.body;
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    user.balance = amount;
    await user.save();

    res.json({ message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω', balance: user.balance });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/users/:id', authMiddleware, adminOnly, async (req, res) => {
  try {
    await User.findByIdAndDelete(req.params.id);
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚õîÔ∏è –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
router.post('/users/:id/block', authMiddleware, adminOnly, async (req, res) => {
  try {
    const { block } = req.body;
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    user.isBlocked = block;
    await user.save();

    res.json({ message: block ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
router.get('/users/:id/history', authMiddleware, adminOnly, async (req, res) => {
  try {
    const userId = req.params.id;
    const history = await Transaction.find({ userId }).sort({ date: -1 });
    res.json(history);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// üõ°Ô∏è –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
const authMiddleware = async (req, res, next) => {
  const authHeader = req.header('Authorization');

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch (err) {
    return res.status(401).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–æ–∫–µ–Ω' });
  }
};

// üîê –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω
const adminOnly = (req, res, next) => {
  if (req.user?.isAdmin || req.user?.role === 'admin') {
    return next();
  }
  return res.status(403).json({ message: '–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤' });
};

module.exports = {
  authMiddleware,
  adminOnly
};