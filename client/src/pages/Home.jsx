import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

function Home() {
  const [profile, setProfile] = useState(null);
  const [amount, setAmount] = useState('');
  const [message, setMessage] = useState('');
  const navigate = useNavigate();

  const token = localStorage.getItem('token');

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const fetchProfile = () => {
    fetch('/api/user/profile', {
      method: 'GET',
      headers: {
        Authorization: `Bearer ${token}`,
      },
    })
      .then(res => {
        if (!res.ok) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return res.json();
      })
      .then(data => setProfile(data))
      .catch(err => {
        console.error(err.message);
        navigate('/login');
      });
  };

  useEffect(() => {
    if (!token) {
      navigate('/login');
      return;
    }
    fetchProfile();
  }, [navigate, token]);

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  const handleDeposit = () => {
    fetch('/api/balance/deposit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ amount: Number(amount) }),
    })
      .then(res => res.json())
      .then(data => {
        setMessage(data.message || '‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
        setAmount('');
        fetchProfile();
      })
      .catch(() => setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏'));
  };

  // –°–Ω—è—Ç–∏–µ
  const handleWithdraw = () => {
    fetch('/api/balance/withdraw', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ amount: Number(amount) }),
    })
      .then(res => res.json())
      .then(data => {
        setMessage(data.message || '‚úÖ –°–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ!');
        setAmount('');
        fetchProfile();
      })
      .catch(() => setMessage('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏'));
  };

  if (!profile) return <div>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</div>;

  return (
    <div>
      <h1>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {profile.name || profile.email}</h1>
      <p><strong>üí∞ –ë–∞–ª–∞–Ω—Å:</strong> ${profile.balance.toFixed(2)}</p>

      <h3>‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ / ‚ûñ –°–Ω—è—Ç–∏–µ</h3>
      <input
        type="number"
        value={amount}
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É"
        onChange={(e) => setAmount(e.target.value)}
      />
      <br /><br />
      <button onClick={handleDeposit}>üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å</button>{' '}
      <button onClick={handleWithdraw}>üí∏ –°–Ω—è—Ç—å</button>

      {message && <p style={{ color: 'green', marginTop: '10px' }}>{message}</p>}

      <h3>üìú –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
      <ul>
        {profile.transactions?.length > 0 ? (
          profile.transactions.map((tx, index) => (
            <li key={index}>
              {tx.type === 'deposit' ? '‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' : '‚ûñ –°–Ω—è—Ç–∏–µ'} ‚Äî ${tx.amount} (
              {new Date(tx.date).toLocaleString()})
            </li>
          ))
        ) : (
          <li>–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</li>
        )}
      </ul>
    </div>
  );
}

export default Home;