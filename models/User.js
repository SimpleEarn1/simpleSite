const mongoose = require('mongoose');

// –°—Ö–µ–º–∞ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
const transactionSchema = new mongoose.Schema({
  type: { type: String, enum: ['deposit', 'withdraw'], required: true },
  amount: { type: Number, required: true },
  date: { type: Date, default: Date.now }
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  email:    { type: String, required: true, unique: true },
  password: { type: String, required: true },

  balance:        { type: Number, default: 0 },      // —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  investedAmount: { type: Number, default: 0 },      // –≤–ª–æ–∂–µ–Ω–æ
  profit:         { type: Number, default: 0 },      // –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥
  lastWithdrawalDate: { type: Date, default: null }, // –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞ —Å–Ω—è—Ç–∏—è

  transactions: [transactionSchema],                 // üü¢ –º–∞—Å—Å–∏–≤ –æ–ø–µ—Ä–∞—Ü–∏–π

  referrerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: null }, // –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
  role:       { type: String, default: 'user' },     // user –∏–ª–∏ admin
  isBlocked:  { type: Boolean, default: false },
  createdAt:  { type: Date, default: Date.now }
});

module.exports = mongoose.model('User', userSchema);