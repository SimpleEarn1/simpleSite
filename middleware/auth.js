const jwt = require('jsonwebtoken');
const User = require('../models/User');

// üîê Middleware: –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function authMiddleware(req, res, next) {
  const authHeader = req.headers.authorization;

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ authHeader –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ò–õ–ò –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'Bearer '
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ message: '–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const user = await User.findById(decoded.userId); // –∫–ª—é—á 'userId' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–æ–∫–µ–Ω–µ
    if (!user) {
      return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    req.user = user;      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    req.userId = user.id; // —É–¥–æ–±–Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏
    next();
  } catch (error) {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
}

// üîí Middleware: –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
function adminOnly(req, res, next) {
  if (!req.user || req.user.role !== 'admin') {
    return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)' });
  }
  next();
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware
module.exports = {
  authMiddleware,
  adminOnly
};